#!/usr/bin/env bash

BASH_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
source $BASH_DIR/kv-bash

OK()      { echo -e "[\e[01;32m  OK  \e[0m]"; }
FAILED()  { echo -e "[\e[01;31mFAILED\e[0m]"; }
RESULT()  { [ $? == 0 ] && OK || FAILED; }

TEST_COUNT=0

# Usage: TESTCASE [description string]
function TESTCASE() {
    ((TEST_COUNT++))
	printf "%3s %-50s" "$TEST_COUNT" "$1"
}

rm -rf "$KV_USER_DIR"

echo
echo RUN ALL TEST CASES:
echo ===================

TESTCASE 'get unset var should return empty'
	[ "$(kvget name)" == "" ]
	RESULT

TESTCASE 'set then get a variable'
	kvset name "dam ngoc phat"
	[ "$(kvget name)" == "dam ngoc phat" ]
	RESULT

TESTCASE 'set again with different value'
	kvset name "dam ngoc phat"
	kvset name "damphat"
	[ "$(kvget name)" == "damphat" ]
	RESULT

TESTCASE 'del variable should be empty'
	kvset name "dam ngoc phat"
	kvdel name
	[ "$(kvget name)" == "" ]
	RESULT

TESTCASE 'del non existing valriable is no-error'
	[ "$(kvdel name 2>&1)" == "" ]
	RESULT

TESTCASE 'set without param return error'
	kvset 2>/dev/null
	[ $? != 0 ]
	RESULT

TESTCASE 'get without param return error'
	kvget 2>/dev/null
	[ $? != 0 ]
	RESULT

TESTCASE 'del without param return error'
	kvdel 2>/dev/null
	[ $? != 0 ]
	RESULT

TESTCASE 'set 3 keys/value; list => line count = 3'
	kvclear
	kvset var1 value1
	kvset var2 value2
	kvset var3 value3
	[ $(kvlist | wc -l) == 3 ]
	RESULT
	
TESTCASE 'get non-exist-var => line count = 1'
	[ $(kvget non-exist-var | wc -l) == 1 ]
	RESULT

TESTCASE 'clear => line count = 0'
	kvset var1 value1
	kvset var2 value2
	kvclear
	[ $(kvlist | wc -l) == 0 ]
	RESULT
	
TESTCASE 'empty value => error code != 0'
    kvset name 
    $(kvget name)
    [ $? != 0 ]
    RESULT	

TESTCASE 'spaces in value'
	kvset name '  phat  dam  '
	[ "$(kvget name)" == '  phat  dam  ' ]
	RESULT
	
#more testcase here

echo
