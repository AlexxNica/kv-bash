#!/bin/bash
# ABOUT db-bash: 
#    key/value dabatase for bash script
#    database store in HOME directory
#    each user has 1 database
#
# Author: damphat
# Requirements: unix-like environement, no dependencies
#
# USAGE:
#        set <key> <value>     # assign value to key
#        get <key>             # get value of key
#        del <key>             # delete by key
#        list                  # list all current key/value pairs
#        clear                 # clear database
#
# EXAMPLES: 
#    $ source db-bash
#    $ set user damphat
#    $ set pass abc@123
#    $ list
#      user damphat
#      pass abc@123
#    $ get user
#      damphat
#    $ get pass
#      abc@123
#    $ del pass
#    $ get pass
#
#    $ clear

########################
# CONSTANTS
########################

USER_DIR=~/.centos-apps

########################
# LOCAL FUNCTIONS
########################

# print to stderr, red color
echo-err() {
  echo -e "\e[01;31m$@\e[0m" >&2
}

# Usage: echo-err-box <err-msg> <function-name>
echo-err-box() {
	  echo-err "  +-------------------------------+"
	  echo-err "  | ERROR: $1"
	  echo-err "  | function: $2"
	  echo-err "  +-------------------------------+"
}

# Usage: validate_key <key>
validate_key() {
	[[ $1 =~ ^[0-9a-zA-Z._:-]+$  ]]
}

########################
# ENSURE THIS-FILE IS CALL BY 'source db-bash'
########################

[[ "${BASH_SOURCE[0]}" != "${0}" ]] || {
	echo-err "  +------------------------------------------------+"
	echo-err "  | FALTAL ERROR: wrong usage :(                   |"
	echo-err "  | You should use this via source                 |"
	echo-err "  |     $ source db-bash                           |"	
	echo-err "  |                                                |"
	echo-err "  | Examples:                                      |"
	echo-err "  |     $ source db-bash                           |"
	echo-err "  |     $ set user damphat                         |"
	echo-err "  |     $ set pass abc@123                         |"
	echo-err "  |     $ list                                     |"
	echo-err "  |       user damphat                             |"
	echo-err "  |       pass abc@123                             |"
	echo-err "  |     $ get user                                 |"
	echo-err "  |       damphat                                  |"
	echo-err "  |     $ get pass                                 |"
	echo-err "  |       abc@123                                  |"
	echo-err "  |     $ del pass                                 |"
	echo-err "  |     $ get pass                                 |"
	echo-err "  |                                                |"
	echo-err "  |     $ clear                                    |"
	echo-err "  +------------------------------------------------+"
	exit 1  # TODO: KILL PARENT SHELL?
}

########################
# PUBLIC FUNCTIONS
########################

# Usage: get <key>
get() {
	key=$1
	validate_key $key || {
		echo-err-box 'invalid param "key"' 'get()'
		return 1
	}
	VALUE=$([ -f $USER_DIR/$key ] && cat $USER_DIR/$key)
	echo $VALUE
	
	[ "$VALUE" != "" ]
}

# Usage: set <key> <value> 
set() {
	key=$1
	value=$2
	validate_key $key || {
		echo-err-box 'invalid param "key"' 'set()'
		return 1
	}
	test -d $USER_DIR || mkdir $USER_DIR
	echo $value > $USER_DIR/$key
}

# Usage: del <key>
del() {
	key=$1
	validate_key $key || {
		echo-err-box 'invalid param "key"' 'del()'
		return 1
	}
	test -f $USER_DIR/$key && rm -f $USER_DIR/$key
}

# list all key/value pairs to stdout
list() {
	for i in $USER_DIR/*; do
		if [ -f $i ]; then
			key=$(basename $i)
			echo "$key" "$(get $key)"
		fi
	done 
}

# clear all key/value pairs in database
clear() {
	rm -rf $USER_DIR
}
